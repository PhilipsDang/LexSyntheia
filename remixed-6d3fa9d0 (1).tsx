import React, { useState, useEffect } from 'react';
import { Search, FileText, Calendar, Scale, Brain, Users, Clock, CheckSquare, AlertTriangle, BookOpen, Gavel, PenTool, Database, Settings, User, Bell, Menu, X, ChevronRight, Download, Upload, Eye, Edit3, Zap } from 'lucide-react';

const LexSyntheia = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [notifications, setNotifications] = useState(3);
  const [isProcessing, setIsProcessing] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [analysisResults, setAnalysisResults] = useState(null);
  const [draftContent, setDraftContent] = useState('');

  // Mock data for demonstration
  const recentCases = [
    { id: 1, title: 'Johnson v. State Corp', type: 'Contract Dispute', priority: 'High', deadline: '2025-06-25', status: 'In Progress' },
    { id: 2, title: 'Smith Patent Application', type: 'IP Law', priority: 'Medium', deadline: '2025-07-01', status: 'Review' },
    { id: 3, title: 'ABC Corp Compliance', type: 'Regulatory', priority: 'High', deadline: '2025-06-20', status: 'Urgent' }
  ];

  const legalResearch = [
    { query: 'contract breach remedies', results: 847, relevance: 98 },
    { query: 'intellectual property infringement', results: 1203, relevance: 95 },
    { query: 'employment law termination', results: 654, relevance: 92 }
  ];

  const aiCapabilities = [
    { name: 'Legal Research', accuracy: 98, speed: '3.2s avg', status: 'Active' },
    { name: 'Contract Analysis', accuracy: 96, speed: '5.1s avg', status: 'Active' },
    { name: 'Document Drafting', accuracy: 94, speed: '8.7s avg', status: 'Active' },
    { name: 'Compliance Check', accuracy: 99, speed: '2.1s avg', status: 'Active' }
  ];

  const simulateAIProcessing = () => {
    setIsProcessing(true);
    setTimeout(() => {
      setIsProcessing(false);
      // Simulate AI analysis results
      setAnalysisResults({
        riskLevel: 'Low',
        complianceScore: 85,
        keyClauses: 12,
        recommendations: [
          'Consider adding a force majeure clause',
          'Liability cap may be too high for this contract type',
          'Payment terms are standard and acceptable'
        ]
      });
    }, 2000);
  };

  const handleSearch = () => {
    if (!searchQuery.trim()) return;
    
    setIsProcessing(true);
    setTimeout(() => {
      setIsProcessing(false);
      setSearchResults([
        { 
          title: `${searchQuery} - Case Analysis`, 
          type: 'Case Law', 
          relevance: 98, 
          citation: '123 F.3d 456 (9th Cir. 2024)',
          summary: `Relevant case law regarding ${searchQuery}`
        },
        { 
          title: `${searchQuery} - Statutory Framework`, 
          type: 'Statute', 
          relevance: 95, 
          citation: 'USC ยง 1234',
          summary: `Federal statute covering ${searchQuery}`
        },
        { 
          title: `${searchQuery} - Expert Commentary`, 
          type: 'Commentary', 
          relevance: 92, 
          citation: 'Legal Review Vol. 45',
          summary: `Academic analysis of ${searchQuery}`
        }
      ]);
    }, 1500);
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      setUploadedFile(file);
      // Simulate contract analysis
      simulateAIProcessing();
    }
  };

  const generateDocument = (docType) => {
    setIsProcessing(true);
    setTimeout(() => {
      setIsProcessing(false);
      setDraftContent(`# ${docType}\n\nThis is a sample ${docType.toLowerCase()} generated by AI.\n\n## Key Terms\n- Party A: [To be filled]\n- Party B: [To be filled]\n- Effective Date: [Date]\n\n## Main Provisions\n1. [First provision]\n2. [Second provision]\n3. [Third provision]\n\n*This document was generated by LexSyntheia AI and requires legal review.*`);
    }, 2000);
  };

  const Sidebar = () => (
    <div className={`${sidebarOpen ? 'w-64' : 'w-16'} bg-slate-900 text-white transition-all duration-300 flex flex-col`}>
      <div className="p-4 border-b border-slate-700">
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
            <Scale className="w-5 h-5" />
          </div>
          {sidebarOpen && <span className="font-bold text-lg">LexSyntheia</span>}
        </div>
      </div>
      
      <nav className="flex-1 p-4">
        {[
          { id: 'dashboard', icon: Brain, label: 'AI Dashboard' },
          { id: 'research', icon: Search, label: 'Legal Research' },
          { id: 'contracts', icon: FileText, label: 'Contract Analysis' },
          { id: 'drafting', icon: PenTool, label: 'Document Drafting' },
          { id: 'compliance', icon: CheckSquare, label: 'Compliance' },
          { id: 'calendar', icon: Calendar, label: 'Schedule' },
          { id: 'knowledge', icon: Database, label: 'Knowledge Base' },
          { id: 'cases', icon: Gavel, label: 'Case Management' }
        ].map(({ id, icon: Icon, label }) => (
          <button
            key={id}
            onClick={() => setActiveTab(id)}
            className={`w-full flex items-center space-x-3 p-3 rounded-lg transition-colors mb-1 ${
              activeTab === id ? 'bg-blue-600' : 'hover:bg-slate-800'
            }`}
          >
            <Icon className="w-5 h-5" />
            {sidebarOpen && <span>{label}</span>}
          </button>
        ))}
      </nav>
    </div>
  );

  const Header = () => (
    <div className="bg-white border-b border-gray-200 px-6 py-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <button onClick={() => setSidebarOpen(!sidebarOpen)} className="p-2 hover:bg-gray-100 rounded-lg">
            <Menu className="w-5 h-5" />
          </button>
          <div className="relative">
            <Search className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search legal documents, cases, or ask AI..."
              className="pl-10 pr-4 py-2 w-96 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
            />
          </div>
        </div>
        <div className="flex items-center space-x-4">
          <button 
            onClick={() => setNotifications(0)}
            className="relative p-2 hover:bg-gray-100 rounded-lg"
          >
            <Bell className="w-5 h-5" />
            {notifications > 0 && (
              <span className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                {notifications}
              </span>
            )}
          </button>
          <button className="p-2 hover:bg-gray-100 rounded-lg">
            <Settings className="w-5 h-5" />
          </button>
          <div className="flex items-center space-x-2">
            <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
              <User className="w-4 h-4 text-white" />
            </div>
            <span className="font-medium">Legal Pro</span>
          </div>
        </div>
      </div>
    </div>
  );

  const DashboardContent = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-gray-900">AI Legal Assistant Dashboard</h1>
        <div className="flex space-x-3">
          <button 
            onClick={simulateAIProcessing}
            className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all flex items-center space-x-2"
          >
            <Zap className="w-4 h-4" />
            <span>AI Quick Analysis</span>
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {aiCapabilities.map((capability, index) => (
          <div key={index} className="bg-white p-6 rounded-xl shadow-lg border border-gray-100">
            <div className="flex items-center justify-between mb-4">
              <h3 className="font-semibold text-gray-900">{capability.name}</h3>
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Accuracy</span>
                <span className="font-medium text-green-600">{capability.accuracy}%</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Avg Speed</span>
                <span className="font-medium">{capability.speed}</span>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Gavel className="w-5 h-5 mr-2 text-blue-600" />
            Active Cases
          </h2>
          <div className="space-y-4">
            {recentCases.map(caseItem => (
              <div key={caseItem.id} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-medium">{caseItem.title}</h3>
                  <span className={`px-2 py-1 rounded-full text-xs ${
                    caseItem.priority === 'High' ? 'bg-red-100 text-red-800' : 
                    caseItem.priority === 'Medium' ? 'bg-yellow-100 text-yellow-800' : 
                    'bg-green-100 text-green-800'
                  }`}>
                    {caseItem.priority}
                  </span>
                </div>
                <div className="flex items-center justify-between text-sm text-gray-600">
                  <span>{caseItem.type}</span>
                  <span>Due: {caseItem.deadline}</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Brain className="w-5 h-5 mr-2 text-purple-600" />
            AI Research Insights
          </h2>
          <div className="space-y-4">
            {legalResearch.map((research, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-medium capitalize">{research.query}</h3>
                  <span className="text-sm font-medium text-blue-600">{research.relevance}% relevant</span>
                </div>
                <div className="text-sm text-gray-600">
                  {research.results} matching documents found
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {isProcessing && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-8 rounded-xl shadow-2xl">
            <div className="flex items-center space-x-4">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span className="text-lg font-medium">AI Processing Legal Analysis...</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );

  const ResearchContent = () => (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900">Legal Research Engine</h1>
      
      <div className="bg-white p-6 rounded-xl shadow-lg">
        <div className="flex space-x-4 mb-6">
          <div className="flex-1">
            <input
              type="text"
              placeholder="Enter your legal research query (e.g., 'contract breach remedies in California')"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
            />
          </div>
          <button 
            onClick={handleSearch}
            disabled={!searchQuery.trim()}
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center space-x-2"
          >
            <Search className="w-4 h-4" />
            <span>AI Research</span>
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="font-semibold text-blue-900 mb-2">Case Law</h3>
            <p className="text-sm text-blue-700">Search through judicial decisions and precedents</p>
          </div>
          <div className="bg-green-50 p-4 rounded-lg">
            <h3 className="font-semibold text-green-900 mb-2">Statutes & Regulations</h3>
            <p className="text-sm text-green-700">Find relevant laws and regulatory frameworks</p>
          </div>
          <div className="bg-purple-50 p-4 rounded-lg">
            <h3 className="font-semibold text-purple-900 mb-2">Legal Commentary</h3>
            <p className="text-sm text-purple-700">Access expert analysis and interpretations</p>
          </div>
        </div>
      </div>

      <div className="bg-white p-6 rounded-xl shadow-lg">
        <h2 className="text-xl font-semibold mb-4">Research Results</h2>
        {searchResults.length > 0 ? (
          <div className="space-y-4">
            {searchResults.map((result, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 cursor-pointer">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-medium">{result.title}</h3>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-green-600 font-medium">{result.relevance}% match</span>
                    <Eye className="w-4 h-4 text-gray-400" />
                  </div>
                </div>
                <p className="text-sm text-gray-600 mb-2">{result.summary}</p>
                <div className="flex items-center justify-between text-sm text-gray-600">
                  <span className="bg-gray-100 px-2 py-1 rounded">{result.type}</span>
                  <span>{result.citation}</span>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8 text-gray-500">
            <Search className="w-12 h-12 mx-auto mb-4 text-gray-300" />
            <p>Enter a search query above to find relevant legal documents</p>
          </div>
        )}
      </div>
    </div>
  );

  const ContractsContent = () => (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900">Contract Analysis & Review</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Upload className="w-5 h-5 mr-2 text-blue-600" />
            Upload Contract
          </h2>
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors">
            <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-600 mb-2">
              {uploadedFile ? `Selected: ${uploadedFile.name}` : 'Drag and drop your contract or'}
            </p>
            <input
              type="file"
              accept=".pdf,.doc,.docx,.txt"
              onChange={handleFileUpload}
              className="hidden"
              id="file-upload"
            />
            <label
              htmlFor="file-upload"
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 cursor-pointer inline-block"
            >
              Choose File
            </label>
          </div>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Brain className="w-5 h-5 mr-2 text-purple-600" />
            AI Analysis Results
          </h2>
          <div className="space-y-4">
            {analysisResults ? (
              <>
                <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                  <span className="font-medium text-green-800">Risk Assessment</span>
                  <span className="text-green-600 font-bold">{analysisResults.riskLevel} Risk</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                  <span className="font-medium text-yellow-800">Compliance Score</span>
                  <span className="text-yellow-600 font-bold">{analysisResults.complianceScore}/100</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                  <span className="font-medium text-blue-800">Key Clauses Found</span>
                  <span className="text-blue-600 font-bold">{analysisResults.keyClauses}</span>
                </div>
                <div className="mt-4">
                  <h4 className="font-medium text-gray-800 mb-2">AI Recommendations:</h4>
                  <ul className="space-y-1">
                    {analysisResults.recommendations.map((rec, index) => (
                      <li key={index} className="text-sm text-gray-600 flex items-start">
                        <span className="w-2 h-2 bg-blue-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                        {rec}
                      </li>
                    ))}
                  </ul>
                </div>
              </>
            ) : (
              <div className="text-center py-8 text-gray-500">
                <Brain className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                <p>Upload a contract to see AI analysis results</p>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="bg-white p-6 rounded-xl shadow-lg">
        <h2 className="text-xl font-semibold mb-4">Contract Analysis Features</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[
            { name: "Clause Identification", desc: "Automatically identify and categorize contract clauses", icon: Search },
            { name: "Risk Assessment", desc: "AI-powered risk analysis with severity scoring", icon: AlertTriangle },
            { name: "Compliance Check", desc: "Verify compliance with regulations and standards", icon: CheckSquare },
            { name: "Term Extraction", desc: "Extract key terms, dates, and obligations", icon: FileText },
            { name: "Comparison Analysis", desc: "Compare contract versions and highlight changes", icon: Eye },
            { name: "Smart Redlining", desc: "AI-generated suggestions and improvements", icon: Edit3 }
          ].map((feature, index) => {
            const Icon = feature.icon;
            return (
              <div key={index} className="p-4 border border-gray-200 rounded-lg hover:shadow-md transition-shadow">
                <Icon className="w-6 h-6 text-blue-600 mb-2" />
                <h3 className="font-semibold mb-1">{feature.name}</h3>
                <p className="text-sm text-gray-600">{feature.desc}</p>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );

  const DraftingContent = () => (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900">AI Document Drafting</h1>
      
      <div className="bg-white p-6 rounded-xl shadow-lg">
        <h2 className="text-xl font-semibold mb-4">Create New Document</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[
            { type: "Contract", desc: "Service agreements, NDAs, employment contracts", color: "blue" },
            { type: "Legal Brief", desc: "Motions, pleadings, legal memoranda", color: "green" },
            { type: "Discovery", desc: "Interrogatories, requests for production", color: "purple" },
            { type: "Compliance", desc: "Policies, procedures, compliance documents", color: "orange" },
            { type: "Corporate", desc: "Articles, bylaws, board resolutions", color: "red" },
            { type: "Litigation", desc: "Complaints, answers, summary judgments", color: "indigo" }
          ].map((doc, index) => (
            <button
              key={index}
              onClick={() => generateDocument(doc.type)}
              className="p-6 border-2 border-gray-300 rounded-lg hover:border-blue-400 hover:bg-blue-50 transition-all text-left"
            >
              <h3 className="font-semibold text-gray-800 mb-2">{doc.type}</h3>
              <p className="text-sm text-gray-600">{doc.desc}</p>
            </button>
          ))}
        </div>
      </div>

      <div className="bg-white p-6 rounded-xl shadow-lg">
        <h2 className="text-xl font-semibold mb-4">AI Writing Assistant</h2>
        <div className="space-y-4">
          <textarea
            placeholder="Describe what you want to draft... (e.g., 'Create a non-disclosure agreement for a software company')"
            className="w-full h-32 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 resize-none"
            value={draftContent}
            onChange={(e) => setDraftContent(e.target.value)}
          />
          <div className="flex items-center justify-between">
            <div className="flex space-x-4">
              <select className="px-3 py-2 border border-gray-300 rounded-lg">
                <option>Document Type</option>
                <option>Contract</option>
                <option>Legal Brief</option>
                <option>Motion</option>
              </select>
              <select className="px-3 py-2 border border-gray-300 rounded-lg">
                <option>Jurisdiction</option>
                <option>Federal</option>
                <option>California</option>
                <option>New York</option>
              </select>
            </div>
            <div className="flex space-x-2">
              {draftContent && (
                <button 
                  onClick={() => setDraftContent('')}
                  className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
                >
                  Clear
                </button>
              )}
              <button 
                onClick={() => generateDocument('Custom Document')}
                className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-2 rounded-lg hover:from-blue-700 hover:to-purple-700 flex items-center space-x-2"
              >
                <PenTool className="w-4 h-4" />
                <span>Generate Document</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard': return <DashboardContent />;
      case 'research': return <ResearchContent />;
      case 'contracts': return <ContractsContent />;
      case 'drafting': return <DraftingContent />;
      default: return <DashboardContent />;
    }
  };

  return (
    <div className="flex h-screen bg-gray-50">
      <Sidebar />
      <div className="flex-1 flex flex-col overflow-hidden">
        <Header />
        <main className="flex-1 overflow-y-auto p-6">
          {renderContent()}
        </main>
      </div>
    </div>
  );
};

export default LexSyntheia;